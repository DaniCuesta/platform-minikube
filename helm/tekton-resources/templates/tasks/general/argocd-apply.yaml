apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-apply
  namespace: tekton-tasks
spec:
  params:
    - name: repoURL
      description: URL del repositorio Git
    - name: pathToApplication
      description: Ruta relativa hacia el archivo `application.yaml` en el repositorio clonado
    - name: argocdServer
      description: URL del servidor de Argo CD
    - name: argocdUsername
      description: Usuario para la autenticación de Argo CD
    - name: argocdPassword
      description: Contraseña para la autenticación de Argo CD
  workspaces:
    - name: output
  volumes:
    - name: ssh-key
      secret:
        secretName: github-ssh-key  # Reemplaza con el nombre correcto de tu secreto
  steps:
    - name: check-create-deploy
      image: docker.io/argoproj/argocd
      workingDir: $(workspaces.output.path)
      volumeMounts:
        - name: ssh-key
          mountPath: /root/.ssh
      env:
        - name: SSH_AUTH_SOCK
          value: /tmp/ssh-agent.sock
        - name: GIT_SSH_COMMAND
          value: "ssh -o StrictHostKeyChecking=no"
      script: |
        # Iniciar el agente SSH
        eval $(ssh-agent -s)
        # Añadir la clave privada al agente
        ssh-add /root/.ssh/id_rsa
        export SSH_AUTH_SOCK=$(find /tmp -name 'ssh-*/agent.*' 2>/dev/null | head -n 1)
        
        # Función para verificar si el repositorio ya está registrado
        check_repo_exists() {
          argocd repo list --insecure | grep -q $(params.repoURL)
          return $?
        }

        # Función para verificar si la aplicación ya existe
        check_app_exists() {
          argocd app list --insecure | grep -q example-helm-app
          return $?
        }

        # Iniciar sesión en Argo CD
        yes | argocd login $(params.argocdServer) --username $(params.argocdUsername) --password $(params.argocdPassword) --insecure

        # Verificar si el repositorio ya está registrado
        if check_repo_exists; then
          echo "Repositorio $(params.repoURL) ya está registrado."
        else
          # Registrar el repositorio usando la clave SSH privada
          argocd repo add $(params.repoURL) --ssh-private-key-path /root/.ssh/id_rsa --insecure-skip-server-verification
        fi

        # Verificar si la aplicación ya está registrada
        if check_app_exists; then
          echo "La aplicación example-helm-app ya está registrada."
        else
          # Crear la aplicación usando el archivo `application.yaml`
          argocd app create --file $(workspaces.output.path)/$(params.pathToApplication) --insecure
        fi

        # Sincronizar la aplicación para asegurar que esté actualizada
        argocd app sync example-helm-app --insecure


