apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-apply
  namespace: tekton-tasks
spec:
  params:
    - name: repoURL
      description: URL del repositorio Git
    - name: pathToApplication
      description: Ruta relativa hacia el archivo application.yaml en el repositorio clonado
    - name: argocdServer
      description: URL del servidor de Argo CD
    - name: argocdUsername
      description: Usuario para la autenticación de Argo CD
    - name: argocdPassword
      description: Contraseña para la autenticación de Argo CD
  workspaces:
    - name: output
  volumes:
    - name: ssh-key
      secret:
        secretName: github-ssh-key  # Asegúrate de que este es el nombre correcto del secreto
  steps:
    - name: check-create-deploy
      image: docker.io/argoproj/argocd
      workingDir: $(workspaces.output.path)
      volumeMounts:
        - name: ssh-key
          mountPath: /tmp/ssh-keys  # Ruta accesible para la clave
      env:
        - name: GIT_SSH_COMMAND
          value: "ssh -o StrictHostKeyChecking=no"
      script: |
        
        # Configurar el socket para el agente SSH
        export SSH_AUTH_SOCK=$(ssh-agent -s | head -n 1 | cut -d ';' -f 1 | cut -d '=' -f 2)
        
        # Funciones para comprobar la existencia del repositorio y la aplicación
        check_repo_exists() {
          argocd repo list --insecure | grep -q "$(params.repoURL)"
          return $?
        }

        check_app_exists() {
          argocd app list --insecure | grep -q "example-helm-app"
          return $?
        }

        # Iniciar sesión en Argo CD
        yes | argocd login $(params.argocdServer) --username $(params.argocdUsername) --password $(params.argocdPassword) --insecure

        # Verificar y registrar el repositorio
        if check_repo_exists; then
          echo "Repositorio $(params.repoURL) ya está registrado."
        else
          argocd repo add $(params.repoURL) --ssh-private-key-path /tmp/ssh-keys/ssh-key --insecure-skip-server-verification
        fi

        # Verificar y crear la aplicación
        if check_app_exists; then
          echo "La aplicación example-helm-app ya está registrada."
        else
          argocd app create --file $(workspaces.output.path)/$(params.pathToApplication) --insecure
        fi

        # Sincronizar la aplicación
        argocd app sync example-helm-app --insecure


