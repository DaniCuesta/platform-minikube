apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: trivy-image-scanner
spec:
  params:
    - name: image
      type: string
      description: "Image to scan"
    - name: registry-url
      description: The URL of the Harbor repository.
    - name: influxdb-url
      type: string
      description: "URL de la instancia de InfluxDB"
    - name: influxdb-org
      type: string
      description: "Nombre de la organización en InfluxDB"
    - name: influxdb-bucket
      type: string
      description: "Bucket en InfluxDB para almacenar los datos"
  workspaces:
    - name: output
      description: "Workspace para almacenar los resultados de Trivy"
  steps:
    - name: trivy-scan
      image: docker.io/aquasec/trivy:latest
      env:
        - name: "DOCKER_CONFIG"
          value: "/.docker"
        - name: "TRIVY_INSECURE"
          value: "true"
        # - name: "GITHUB_TOKEN"
        #   value: "djE6YXF1YXNlY3VyaXR5L3RyaXZ5LWRiOjE3MTUzOTU4NDkxNjY0Nzc0MTc="
      volumeMounts:
        - name: docker-config
          mountPath: /.docker
      workingDir: $(workspaces.output.path)
      script: |
        #!/bin/sh
        set -xe
        trivy image "$(params.image)"
        trivy image --format json -o $(workspaces.output.path)/trivy-report.json "$(params.image)"

    - name: trivy-scan-influxdb-report
      image: $(params.registry-url)/python-influxdb:latest
      imagePullSecrets:
      - name: quay-pull-secret
      env:
        - name: INFLUXDB_URL
          value: "$(params.influxdb-url)"
        - name: INFLUXDB_ORG
          value: "$(params.influxdb-org)"
        - name: INFLUXDB_BUCKET
          value: "$(params.influxdb-bucket)"
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: influxdb-token
              key: token
        - name: TRIVY_REPORT_JSON_PATH
          value: "$(workspaces.output.path)/trivy-report.json"
        - name: IMAGE_NAME
          value: "$(params.image)"
      script: |
        #!/usr/bin/env python3
        import json
        import os
        from influxdb_client import InfluxDBClient, Point
        from influxdb_client.client.write_api import SYNCHRONOUS

        # Obtener las variables de entorno
        influxdb_url = os.getenv("INFLUXDB_URL")
        influxdb_org = os.getenv("INFLUXDB_ORG")
        influxdb_bucket = os.getenv("INFLUXDB_BUCKET")
        influxdb_token = os.getenv("INFLUXDB_TOKEN")
        trivy_report_path = os.getenv("TRIVY_REPORT_JSON_PATH")
        image_name = os.getenv("IMAGE_NAME")

        # Conectar con InfluxDB
        client = InfluxDBClient(url=influxdb_url, token=influxdb_token, org=influxdb_org)
        write_api = client.write_api(write_options=SYNCHRONOUS)

        # Leer el reporte JSON
        try:
            with open(trivy_report_path, "r") as file:
                data = json.load(file)
                trivy_report = data if isinstance(data, list) else data.get("results", [])
                if not isinstance(trivy_report, list):
                    print("Error: el contenido del reporte de Trivy no está en la forma de lista esperada.")
                    exit(1)
        except json.JSONDecodeError as e:
            print(f"Error al decodificar JSON: {e}")
            exit(1)

        # Contar las vulnerabilidades por severidad y tipo
        severity_count_base = {"critical": 0, "high": 0, "medium": 0, "low": 0, "unknown": 0}
        severity_count_app = {"critical": 0, "high": 0, "medium": 0, "low": 0, "unknown": 0}

        for result in trivy_report:
            target_type = result["Type"]
            vulnerabilities = result.get("Vulnerabilities", [])
            severity_dict = severity_count_app if target_type == "jar" else severity_count_base
            for vuln in vulnerabilities:
                severity = vuln["Severity"].lower() + ('_app' if target_type == 'jar' else '_base')
                if severity in severity_dict:
                    severity_dict[severity] += 1

        # Mostrar los conteos de vulnerabilidades y enviarlos a InfluxDB
        print("Vulnerabilidades de la imagen base:")
        for key, value in severity_count_base.items():
            print(f"{key.replace('_base', '').capitalize()}: {value}")
        print("\nVulnerabilidades específicas de la aplicación:")
        for key, value in severity_count_app.items():
            print(f"{key.replace('_app', '').capitalize()}: {value}")

        point = Point("trivy_vulnerabilities") \
            .tag("app_name", image_name) \
            .field("critical_base", severity_count_base["critical_base"]) \
            .field("high_base", severity_count_base["high_base"]) \
            .field("medium_base", severity_count_base["medium_base"]) \
            .field("low_base", severity_count_base["low_base"]) \
            .field("unknown_base", severity_count_base["unknown_base"]) \
            .field("critical_app", severity_count_app["critical_app"]) \
            .field("high_app", severity_count_app["high_app"]) \
            .field("medium_app", severity_count_app["medium_app"]) \
            .field("low_app", severity_count_app["low_app"]) \
            .field("unknown_app", severity_count_app["unknown_app"])

        write_api.write(bucket=influxdb_bucket, org=influxdb_org, record=point)


  volumes:
    - name: docker-config
      secret:
        secretName: quay-kaniko-credentials
        items:
          - key: .dockerconfigjson
            path: config.json








