apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: influxdb-report
  namespace: tekton-tasks
spec:
  description: >
    This Task retrieves data from a SonarQube analysis, assesses the project's security, and reports the results. It ensures that the project meets the minimum security requirements.

    Parameters:

    - name: deployment-name
      description: The name of the deployment.
      type: string
    - name: registry-url
      description: The URL of the Harbor repository.
      type: string
    - name: sonar-url
      description: The route to SonarQube.
      type: string
    - name: project-key-tenant
      description: The tenant for the project.
      type: string
    - name: influxdb-bucket
      description: influxdb bucket
      type: string
    - name: influxdb-url
      description: influxdb url
      type: string
    - name: env
      description: project environment
      type: string
    - name: project-element
      description: project element
      type: string

    Workspaces:

    - name: output
      description: The workspace consisting of a Maven project.

    The Task performs the following steps:
    
    1. Retrieves the SonarQube URL and login credentials from files.
    2. Defines a SonarQube class to interact with the SonarQube API.
    3. Gets the project key by name.
    4. Gets the project status from the SonarQube API.
    5. Retrieves the issues for the project.
    6. Retrieves the lines of code for the project.
    7. Prints the results of the analysis, including blocker, critical, major, and minor issues.
    8. Checks if the project meets the minimum security requirements based on the issues.
    9. Stores the analysis results in InfluxDB for monitoring.
    10. Displays the final status of the analysis.

  workspaces:
    - name: output
      description: The workspace consisting of a Maven project.

  steps:
    - name: influxdb-report
      image: $(params.registry-url)/influxdb-reports:latest
      imagePullSecrets:
      - name: quay-pull-secret
      workingDir: $(workspaces.output.path)
      env:
        - name: LOGIN
          valueFrom:
            secretKeyRef:
              name: sonar-credentials
              key: token
        - name: INFLUXDB_TOKEN
          valueFrom:
            secretKeyRef:
              name: influxdb-token
              key: token
      script: |
        
        # You need to put it in a file to be able to run the script with 'python3 script_sonar.py'.
        # This script is provided in its entirety by the security team.
        # Except for the assignment of the parameters in def main()

        echo "import requests
        import sys
        import influxdb_client, os, time
        from influxdb_client import InfluxDBClient, Point
        from influxdb_client.client.write_api import SYNCHRONOUS

        # Define a SonarQube class to interact with the API
        class SonarQube:
            def __init__(self, url_base, token):
                self.auth = (token, '')
                self.URL_BASE = url_base

            # Method to get project key by name
            def getProjectKeyByName(self, project_name):
                url = self.URL_BASE + '/api/projects/search'
                response = requests.get(url, auth=self.auth, verify=False)
                if response.status_code == 200:
                    for i in response.json('components'):
                        if i['name'] == project_name:
                            return i['key']
                else:
                    exit(0)

            # Method to get code duplication percentage
            def getCodeDuplication(self, project_key):
                url = self.URL_BASE + '/api/measures/component'
                params = {'component': project_key, 'metricKeys': 'duplicated_lines_density'}
                response = requests.get(url, params=params, auth=self.auth, verify=False)
                if response.status_code == 200:
                    duplicity_str = response.json()['component']['measures'][0]['value']
                    duplicity = float(duplicity_str.replace('%', ''))
                    return duplicity
                else:
                    print('Duplicidad fallida')
                    exit(0)

            # Method to get coverage
            def getCoverage(self, project_key):
                url = self.URL_BASE + '/api/measures/component'
                params = {'component': project_key, 'metricKeys': 'coverage'}
                response = requests.get(url, params=params, auth=self.auth, verify=False)
                if response.status_code == 200:
                    coverage_str = response.json()['component']['measures'][0]['value']
                    coverage = float(coverage_str.replace('%', ''))
                    return coverage
                else:
                    exit(0)

            # Method to get project status
            def getProjectStatus(self, project_key):
                url = self.URL_BASE + '/api/qualitygates/project_status'
                params = {'projectKey': project_key}
                response = requests.get(url, params=params, auth=self.auth, verify=False)
                if response.status_code == 200:
                    if response.json()['projectStatus']['status'] == 'OK':
                        return 'OK'
                    elif response.json()['projectStatus']['status'] == 'NONE':
                        return 'NONE'
                    elif response.json()['projectStatus']['status'] == 'WARN':
                        return 'WARN'
                    elif response.json()['projectStatus']['status'] == 'ERROR':
                        return 'ERROR'
                elif response.status_code == 404:
                    exit(0)

            # Method to get issues from the project
            def getIssuesFromProject(self, project_key):
                url = self.URL_BASE + '/api/issues/search'
                manage = False
                page = 1
                issues = {'TOTAL': 0, 'INFO': 0, 'MINOR': 0, 'MAJOR': 0, 'CRITICAL': 0, 'BLOCKER': 0}
                while manage == False:
                    params = {'componentKeys': project_key, 'p': page}
                    response = requests.get(url, params=params, auth=self.auth, verify=False)
                    if response.status_code == 200:
                        issues['TOTAL'] = issues['TOTAL'] + len(response.json()['issues'])
                        for i in response.json()['issues']:
                            issues[i['severity']] = issues[i['severity']] + 1
                        if issues['TOTAL'] == response.json()['total']:
                            manage = True
                        else:
                            page = page + 1
                    else:
                        exit(0)
                return issues

            # Method to get lines of code for the project
            def getLinesCode(self, project_key):
                url = self.URL_BASE + '/api/measures/component'
                params = {'component': project_key, 'metricKeys': 'ncloc'}
                response = requests.get(url, params=params, auth=self.auth, verify=False)
                if response.status_code == 200:
                    for i in response.json()['component']['measures']:
                        if i['metric'] == 'ncloc':
                            return i['value']
                else:
                    exit(0)

            # Method to determine if project passes high severity condition
            def getHight(linesofcode, issues):
                if (linesofcode / 500 >= issues['MAJOR']):
                    return 1
                else:
                    return 0

            # Method to determine if project passes low severity condition
            def getLow(linesofcode, issues):
                if ((linesofcode / 500) * 100 >= issues['MINOR']):
                    return 1
                else:
                    return 0

            # Method to print results
            def printResults(self, issues, proyect_key):
                passCondition(issues, proyect_key)

            # Method to check overall pass condition
            def passCondition(issues, proyect_key):
                if (issues['BLOCKER'] | issues['CRITICAL']) != 0:
                    pass
                elif (SonarQube.getHight == 0):
                    pass
                elif (SonarQube.getLow == 0):
                    pass
                else:
                    pass

            # Method to store data in InfluxDB
            def storeDataInInfluxDB(self, project, env, project_element, project_key_tenant, quality_gate_result, influxdb_url, INFLUXDB_TOKEN, influxdb_bucket, issues, code_duplication, coverage):
                
                organization = 'DES'
                client = influxdb_client.InfluxDBClient(url=influxdb_url, bucket=influxdb_bucket, org=organization, token=INFLUXDB_TOKEN)

                # Determinar el valor de Framework_tag en funci√≥n de project_element
                if project_element == 'back':
                    framework_tag = 'java'
                elif project_element == 'quarkus':
                    framework_tag = 'quarkus'
                elif project_element == 'front':
                    framework_tag = 'angular'
                else:
                    framework_tag = 'unknown'

                print('+++++++++++++++++++++++++++++++++++++++++++')
                print('PROJECT INFO:')
                print('+++++++++++++++++++++++++++++++++++++++++++')
                print(project)
                print(env)
                print(project_element)
                print(framework_tag)
                print(project_key_tenant)
                print('+++++++++++++++++++++++++++++++++++++++++++')
                
                write_api = client.write_api(write_options=SYNCHRONOUS)

                # Crear un punto de datos
                point = (
                    Point('sonarqube_metrics''')
                    .tag('project_tag', project)
                    .tag('Environment_tag', env)
                    .tag('Framework_tag', framework_tag)
                    .tag('Tenant_tag', project_key_tenant)
                    .tag('Element_tag', project_element)
                    .field('quality_gate_status', quality_gate_result)
                    .field('blocker', issues['BLOCKER'])
                    .field('critical', issues['CRITICAL'])
                    .field('major', issues['MAJOR'])
                    .field('minor', issues['MINOR'])
                    .field('info', issues['INFO'])
                    .field('total', issues['TOTAL'])
                    .field('code_duplication', code_duplication)
                    .field('coverage', coverage)
                )
                # Write data into influxdb
                write_api.write(influxdb_bucket, organization, point)

        # Main function
        def main():
            URL_BASE = 'http://$(params.sonar-url)'
            TOKEN = '${LOGIN}'
            project_name = ''
            INFLUXDB_TOKEN = '${INFLUXDB_TOKEN}'
            print('Starting the sonarqube analysist script, getting parameters...')
            # Get parameter values
            project = '$(params.deployment-name)' 
            env = '$(params.env)'
            project_element = '$(params.project-element)'
            project_key_tenant = '$(params.project-key-tenant)'
            influxdb_url = '$(params.influxdb-url)'  
            influxdb_bucket = '$(params.influxdb-bucket)'

            # Create an instance of SonarQube class
            sonarQube = SonarQube(URL_BASE, TOKEN)

            # Get issues from the project
            print('Getting issues...')
            issues = sonarQube.getIssuesFromProject(project_key)

            # Get project status
            print('Getting Quality Gate status...')
            quality_gate = sonarQube.getProjectStatus(project_key)

            if quality_gate == 'OK':
                quality_gate_result = 1
            else:
                quality_gate_result = 0

            # Get code duplication percentage
            print('Getting code duplication...')
            code_duplication = sonarQube.getCodeDuplication(project_key)

            # Get coverage
            print('Getting coverage...')
            coverage = sonarQube.getCoverage(project_key)
            
            print('Storing data into influxdb2 bucket...')
            # Store data in InfluxDB
            sonarQube.storeDataInInfluxDB(project, env, project_element, project_key_tenant, quality_gate_result, influxdb_url, INFLUXDB_TOKEN, influxdb_bucket, issues, code_duplication, coverage)
            print('+++++++++++++++++++++++++++++++++++++++++++')
            print('DATA SUCCESSFULLY STORED')
            print('+++++++++++++++++++++++++++++++++++++++++++')

        # Call the main function
        main()" > script_sonar.py

        python3 script_sonar.py
